var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import _ from "lodash";
import React, { PropTypes } from "react";
import shallowequal from "shallowequal";

export default (function (mapRefDataToProps) {
    var mapBaseActionsToProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {
        return {};
    };
    return function (Component) {
        var _class, _temp;

        var ConnectedComponent = (_temp = _class = function (_React$Component) {
            _inherits(ConnectedComponent, _React$Component);

            function ConnectedComponent(props, context) {
                _classCallCheck(this, ConnectedComponent);

                var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));

                _this._boundRefs = [];
                _this.baseActions = {};
                return _this;
            }

            ConnectedComponent.prototype.componentWillMount = function componentWillMount() {
                this.bindRefs(this.props);
                this.createBaseActions(this.props);
            };

            ConnectedComponent.prototype.componentWillUnmount = function componentWillUnmount() {
                this.unbindRefs();
            };

            ConnectedComponent.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
                this.unbindRefs();
                this.bindRefs(nextProps);
                this.createBaseActions(nextProps);
            };

            ConnectedComponent.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
                return !shallowequal(nextProps, this.props) || !shallowequal(nextState, this.state);
            };

            ConnectedComponent.prototype.bindRefs = function bindRefs(props) {
                var _this2 = this;

                var base = this.context.base;

                var refs = mapRefDataToProps(props);
                this._boundRefs = _.keys(refs).map(function (name) {
                    return base.bindToState(refs[name].path, _extends({}, refs[name].options, {
                        context: _this2,
                        state: name
                    }));
                });
            };

            ConnectedComponent.prototype.unbindRefs = function unbindRefs() {
                var base = this.context.base;

                this._boundRefs.map(function (ref) {
                    try {
                        base.removeBinding(ref);
                    } catch (e) {
                        console.log('fail to remove binding');
                    }
                });
                this._boundRefs = [];
            };

            ConnectedComponent.prototype.createBaseActions = function createBaseActions(props) {
                var base = this.context.base;

                this.baseActions = mapBaseActionsToProps(base, props);
            };

            ConnectedComponent.prototype.render = function render() {
                return React.createElement(Component, _extends({}, this.baseActions, this.props, this.state));
            };

            return ConnectedComponent;
        }(React.Component), _class.contextTypes = {
            base: PropTypes.object
        }, _temp);


        ConnectedComponent.displayName = "FirebaseConnect(" + (Component.displayName || Component.name || "Component") + ")";

        return ConnectedComponent;
    };
});