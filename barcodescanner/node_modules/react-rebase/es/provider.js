var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component, PropTypes } from "react";

var RebaseProvider = (_temp = _class = function (_Component) {
    _inherits(RebaseProvider, _Component);

    function RebaseProvider() {
        _classCallCheck(this, RebaseProvider);

        return _possibleConstructorReturn(this, _Component.apply(this, arguments));
    }

    RebaseProvider.prototype.getChildContext = function getChildContext() {
        return { base: this.props.instance };
    };

    RebaseProvider.prototype.render = function render() {
        return React.Children.only(this.props.children);
    };

    return RebaseProvider;
}(Component), _class.childContextTypes = {
    base: PropTypes.object
}, _temp);
RebaseProvider.propTypes = process.env.NODE_ENV !== "production" ? {
    instance: PropTypes.object
} : {};


export default RebaseProvider;