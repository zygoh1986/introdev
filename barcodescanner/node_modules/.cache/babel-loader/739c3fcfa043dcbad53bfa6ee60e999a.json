{"ast":null,"code":"import { APIKEY, URL_PATH, URL_EXTENSION } from '../../assets/config';\nexport const startScanning = () => {\n  return {\n    type: \"START_SCANNING\"\n  };\n};\nexport const clearScanned = () => {\n  return {\n    type: 'CLEAR_SCANNED'\n  };\n};\nexport const setItem = i => {\n  return {\n    type: 'SET_ITEM',\n    payload: i\n  };\n};\nexport const deleteItem = i => {\n  return {\n    type: 'DELETE_ITEM',\n    payload: i\n  };\n};\nexport const processBarcode = barcode => {\n  return dispatch => {\n    dispatch(spinnerOn()) // let url = URL_PATH + barcode + URL_EXTENSION + APIKEY\n    // let req = new Request(url , {\n    //   headers: {\n    //     'Access-Control-Allow-Origin': 'http://localhost:3000'\n    //   },\n    //   mode: 'no-cors'\n    // })\n    // let product = null\n    // fetch(req)\n    // .catch(err => console.log('error', err))\n    // .then(res => {\n    //   console.log(res.status)\n    //   if(res.status !== 200){\n    //     return {\n    //       resStatus: res.status\n    //     }\n    //   } else if(res.status === 200) {\n    //     return res.json()\n    //   }\n    // })\n    .then(parsedRes => {\n      if (parsedRes.resStatus !== 200) {\n        parsedRes.resStatus === 0 ? dispatch(invalidBarcode('noAPI')) : dispatch(invalidBarcode('invalid'));\n      } else {\n        product = {\n          barcode_number: parsedRes.products[0].barcode_number,\n          barcode_type: parsedRes.products[0].barcode_type,\n          product_name: parsedRes.products[0].product_name,\n          product_image: parsedRes.products[0].images[0],\n          manufacturer: parsedRes.products[0].manufacturer,\n          brand: parsedRes.products[0].brand,\n          category: parsedRes.products[0].category,\n          description: parsedRes.products[0].description\n        };\n        dispatch(productDetected(product));\n      }\n    });\n  };\n};\nexport const spinnerOn = () => {\n  return {\n    type: 'SPINNER_ON'\n  };\n};\nexport const productDetected = product => {\n  return {\n    type: 'PRODUCT_DETECTED',\n    payload: product\n  };\n};\nexport const invalidBarcode = err => {\n  let errText = err === 'noAPI' ? 'NO_API_KEY' : 'INVALID_BARCODE';\n  return {\n    type: errText\n  };\n};","map":{"version":3,"sources":["/Users/zhangyu/Documents/barcodescanner-app/barcodescanner-app/barcodescanner/src/store/actions/scannedItems.js"],"names":["APIKEY","URL_PATH","URL_EXTENSION","startScanning","type","clearScanned","setItem","i","payload","deleteItem","processBarcode","barcode","dispatch","spinnerOn","then","parsedRes","resStatus","invalidBarcode","product","barcode_number","products","barcode_type","product_name","product_image","images","manufacturer","brand","category","description","productDetected","err","errText"],"mappings":"AACA,SAAQA,MAAR,EAAgBC,QAAhB,EAA0BC,aAA1B,QAA8C,qBAA9C;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAC/B,SAAO;AACLC,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJI;AAML,OAAO,MAAMC,YAAY,GAAG,MAAM;AAChC,SAAO;AACLD,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAME,OAAO,GAAIC,CAAD,IAAO;AAC5B,SAAO;AACLH,IAAAA,IAAI,EAAE,UADD;AAELI,IAAAA,OAAO,EAAED;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAME,UAAU,GAAIF,CAAD,IAAO;AAC/B,SAAO;AACLH,IAAAA,IAAI,EAAE,aADD;AAELI,IAAAA,OAAO,EAAED;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMG,cAAc,GAAIC,OAAD,IAAa;AACzC,SAAOC,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAACC,SAAS,EAAV,CAAR,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA,KAwBCC,IAxBD,CAwBMC,SAAS,IAAI;AACjB,UAAGA,SAAS,CAACC,SAAV,KAAwB,GAA3B,EAA+B;AAC7BD,QAAAA,SAAS,CAACC,SAAV,KAAwB,CAAxB,GAA4BJ,QAAQ,CAACK,cAAc,CAAC,OAAD,CAAf,CAApC,GAAgEL,QAAQ,CAACK,cAAc,CAAC,SAAD,CAAf,CAAxE;AACD,OAFD,MAEO;AACLC,QAAAA,OAAO,GAAG;AACRC,UAAAA,cAAc,EAAEJ,SAAS,CAACK,QAAV,CAAmB,CAAnB,EAAsBD,cAD9B;AAERE,UAAAA,YAAY,EAAEN,SAAS,CAACK,QAAV,CAAmB,CAAnB,EAAsBC,YAF5B;AAGRC,UAAAA,YAAY,EAAEP,SAAS,CAACK,QAAV,CAAmB,CAAnB,EAAsBE,YAH5B;AAIRC,UAAAA,aAAa,EAAER,SAAS,CAACK,QAAV,CAAmB,CAAnB,EAAsBI,MAAtB,CAA6B,CAA7B,CAJP;AAKRC,UAAAA,YAAY,EAAEV,SAAS,CAACK,QAAV,CAAmB,CAAnB,EAAsBK,YAL5B;AAMRC,UAAAA,KAAK,EAAEX,SAAS,CAACK,QAAV,CAAmB,CAAnB,EAAsBM,KANrB;AAORC,UAAAA,QAAQ,EAAEZ,SAAS,CAACK,QAAV,CAAmB,CAAnB,EAAsBO,QAPxB;AAQRC,UAAAA,WAAW,EAAEb,SAAS,CAACK,QAAV,CAAmB,CAAnB,EAAsBQ;AAR3B,SAAV;AAUAhB,QAAAA,QAAQ,CAACiB,eAAe,CAACX,OAAD,CAAhB,CAAR;AACD;AACF,KAxCD;AAyCD,GA1CD;AA2CC,CA5CI;AA8CP,OAAO,MAAML,SAAS,GAAG,MAAM;AAC7B,SAAO;AACLT,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAOP,OAAO,MAAMyB,eAAe,GAAIX,OAAD,IAAa;AAC1C,SAAO;AACLd,IAAAA,IAAI,EAAE,kBADD;AAELI,IAAAA,OAAO,EAAEU;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMD,cAAc,GAAIa,GAAD,IAAS;AACrC,MAAIC,OAAO,GAAGD,GAAG,KAAK,OAAR,GAAkB,YAAlB,GAAiC,iBAA/C;AACA,SAAO;AACL1B,IAAAA,IAAI,EAAE2B;AADD,GAAP;AAGD,CALM","sourcesContent":["\nimport {APIKEY, URL_PATH, URL_EXTENSION} from '../../assets/config'\n\nexport const startScanning = () => {\n    return {\n      type: \"START_SCANNING\"\n    }\n  }\n  \n  export const clearScanned = () => {\n    return {\n      type: 'CLEAR_SCANNED'\n    }\n  }\n  \n  export const setItem = (i) => {\n    return {\n      type: 'SET_ITEM',\n      payload: i\n    }\n  }\n  \n  export const deleteItem = (i) => {\n    return {\n      type: 'DELETE_ITEM',\n      payload: i\n    }\n  }\n  \n  export const processBarcode = (barcode) => {\n    return dispatch => {\n      dispatch(spinnerOn())\n      \n      // let url = URL_PATH + barcode + URL_EXTENSION + APIKEY\n      \n      // let req = new Request(url , {\n      //   headers: {\n      //     'Access-Control-Allow-Origin': 'http://localhost:3000'\n      //   },\n      //   mode: 'no-cors'\n      // })\n      \n      // let product = null\n      // fetch(req)\n      // .catch(err => console.log('error', err))\n      // .then(res => {\n      //   console.log(res.status)\n      //   if(res.status !== 200){\n      //     return {\n      //       resStatus: res.status\n      //     }\n      //   } else if(res.status === 200) {\n      //     return res.json()\n      //   }\n      // })\n      .then(parsedRes => {\n        if(parsedRes.resStatus !== 200){\n          parsedRes.resStatus === 0 ? dispatch(invalidBarcode('noAPI')) : dispatch(invalidBarcode('invalid'))\n        } else {\n          product = {\n            barcode_number: parsedRes.products[0].barcode_number,\n            barcode_type: parsedRes.products[0].barcode_type,\n            product_name: parsedRes.products[0].product_name,\n            product_image: parsedRes.products[0].images[0],\n            manufacturer: parsedRes.products[0].manufacturer,\n            brand: parsedRes.products[0].brand,\n            category: parsedRes.products[0].category,\n            description: parsedRes.products[0].description,\n          }\n          dispatch(productDetected(product))\n        } \n      })\n    }\n    }\n  \n  export const spinnerOn = () => {\n    return {\n      type: 'SPINNER_ON'\n    }\n  }\n    \n    \n  export const productDetected = (product) => {\n    return {\n      type: 'PRODUCT_DETECTED',\n      payload: product\n    }\n  }\n  \n  export const invalidBarcode = (err) => {\n    let errText = err === 'noAPI' ? 'NO_API_KEY' : 'INVALID_BARCODE'\n    return {\n      type: errText,\n    }\n  }"]},"metadata":{},"sourceType":"module"}