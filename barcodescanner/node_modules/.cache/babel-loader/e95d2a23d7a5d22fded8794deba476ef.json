{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/zhangyu/Documents/barcodescanner-app/barcodescanner-app/barcodescanner/src/containers/History/History.js\";\nimport React, { Component, Fragment } from 'react';\nimport Product from '../../components/Product/Product';\nimport { clearScanned, setItem, deleteItem } from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport './History.css';\n\nclass History extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.clickHandler = () => {\n      console.log('asdf');\n    };\n  }\n\n  componentDidMount() {\n    // clear the scannedItems of the state\n    this.props.clearScanned();\n  }\n\n  render() {\n    let scannedItems = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"emptyHistory\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"You don't have scanned items on file.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 11\n    }, this); // render the table with all the scanned items info IF there is\n\n\n    if (this.props.scannedItems.length >= 1) {\n      scannedItems = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"divHistory\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-striped\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"No.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 33,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Barcode\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 34,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Product Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 35,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Manufacturer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 36,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: this.props.scannedItems.map((scannedItem, i) => {\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  scope: \"row\",\n                  children: [i + 1, \">\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 45,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: scannedItem.barcode_number\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 46,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: scannedItem.product_name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 47,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: scannedItem.manufacturer\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 48,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    onClick: () => this.props.setItem(i),\n                    className: \"btn btn-sm btn-info\",\n                    children: \"View More\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 49,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 49,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => this.props.deleteItem(i),\n                    type: \"button\",\n                    className: \"btn btn-sm btn-danger\",\n                    children: \"Remove\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 53,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 53,\n                  columnNumber: 21\n                }, this)]\n              }, i, true, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 3\n      }, this);\n    } // render selected item    \n\n\n    if (this.props.selectedItem) {\n      scannedItems = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scannerContainer\",\n        children: /*#__PURE__*/_jsxDEV(Product, {\n          item: this.props.selectedItem,\n          view: this.props.clearScanned\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: scannedItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    scannedItems: state.scanned.scannedItems,\n    selectedItem: state.scanned.productScanned\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    clearScanned: () => {\n      dispatch(clearScanned());\n    },\n    setItem: i => {\n      dispatch(setItem(i));\n    },\n    deleteItem: i => {\n      dispatch(deleteItem(i));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(History);","map":{"version":3,"sources":["/Users/zhangyu/Documents/barcodescanner-app/barcodescanner-app/barcodescanner/src/containers/History/History.js"],"names":["React","Component","Fragment","Product","clearScanned","setItem","deleteItem","connect","History","clickHandler","console","log","componentDidMount","props","render","scannedItems","length","map","scannedItem","i","barcode_number","product_name","manufacturer","selectedItem","mapStateToProps","state","ownProps","scanned","productScanned","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport Product from '../../components/Product/Product'\nimport {clearScanned, setItem, deleteItem} from '../../store/actions/index'\n\nimport {connect} from 'react-redux'\n\nimport './History.css'\n\nclass History extends Component {\n\n  clickHandler = () => {\n    console.log('asdf')\n  }\n\n  componentDidMount(){\n    // clear the scannedItems of the state\n    this.props.clearScanned()\n  }\n\n  render() {\n    let scannedItems = \n          <div className=\"emptyHistory\">\n            <h1>You don't have scanned items on file.</h1>\n          </div>\n\n// render the table with all the scanned items info IF there is\nif (this.props.scannedItems.length >= 1){\n  scannedItems = \n  <div className='divHistory'>\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th scope=\"col\">No.</th>\n                <th scope=\"col\">Barcode</th>\n                <th scope=\"col\">Product Name</th>\n                <th scope=\"col\">Manufacturer</th>\n                <th scope=\"col\"></th>\n                <th scope=\"col\"></th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.props.scannedItems.map((scannedItem, i) => {\n                return (\n                  <tr key={i}>\n                    <th scope=\"row\">{i+1}></th>\n                    <td>{scannedItem.barcode_number}</td>\n                    <td>{scannedItem.product_name}</td>\n                    <td>{scannedItem.manufacturer}</td>\n                    <td><button \n                          type=\"button\" \n                          onClick={()=>this.props.setItem(i)}\n                          className=\"btn btn-sm btn-info\">View More</button></td>\n                    <td><button \n                          onClick={()=>this.props.deleteItem(i)}\n                          type=\"button\" \n                          className=\"btn btn-sm btn-danger\">Remove</button></td>\n                  </tr>\n                  )}\n                  )}\n            </tbody>\n          </table>\n        </div>\n    }\n    \n  // render selected item    \n  if(this.props.selectedItem){\n    scannedItems = \n    <div className='scannerContainer'>\n      <Product \n        item={this.props.selectedItem}\n        view={this.props.clearScanned}/>\n    </div>\n  }\n\n    return (\n      <Fragment>\n        {scannedItems}\n      </Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    scannedItems: state.scanned.scannedItems,\n    selectedItem: state.scanned.productScanned\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    clearScanned: () => { dispatch(clearScanned()) },\n    setItem: (i) => { dispatch(setItem(i)) },\n    deleteItem: (i) => { dispatch( deleteItem(i)) }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(History)"]},"metadata":{},"sourceType":"module"}