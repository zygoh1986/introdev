{"ast":null,"code":"//import {APIKEY, URL_PATH, URL_EXTENSION} from '../../assets/config'\nexport const startScanning = () => {\n  return {\n    type: \"START_SCANNING\"\n  };\n};\nexport const clearScanned = () => {\n  return {\n    type: 'CLEAR_SCANNED'\n  };\n};\nexport const setItem = i => {\n  return {\n    type: 'SET_ITEM',\n    payload: i\n  };\n};\nexport const deleteItem = i => {\n  return {\n    type: 'DELETE_ITEM',\n    payload: i\n  };\n};\nexport const processBarcode = barcode => {\n  return dispatch => {\n    dispatch(spinnerOn()); // let url = URL_PATH + barcode + URL_EXTENSION + APIKEY\n    // let req = new Request(url , {\n    //   headers: {\n    //     'Access-Control-Allow-Origin': 'http://localhost:3000'\n    //   },\n    //   mode: 'no-cors'\n    // })\n    // let product = null\n    // fetch(req)\n    // .catch(err => console.log('error', err))\n    // .then(res => {\n    //   console.log(res.status)\n    //   if(res.status !== 200){\n    //     return {\n    //       resStatus: res.status\n    //     }\n    //   } else if(res.status === 200) {\n    //     return res.json()\n    //   }\n    // })\n\n    const xmlhttp = new XMLHttpRequest();\n    const txt = \"\";\n\n    xmlhttp.onreadystatechange = function () {\n      if (this.readyState == 4 && this.status == 200) {\n        const myObj = JSON.parse(this.responseText); //txt += \"<select>\";\n\n        let x = \"\";\n\n        for (x = 0; x < myObj.data.length; x++) {\n          //txt += \"<option>\" + myObj[x].name;\n          //txt += \"<option>\" + myObj[x].price;\n          //txt += '<option value=\"' + x + '\">' + myObj.catalog[x].name + '</option>';\n          console.log(myObj.data[x].names);\n        } //txt += \"</select>\";\n\n\n        document.getElementById(\"servicedetails\").innerHTML = txt;\n      }\n    };\n\n    xmlhttp.open(\"GET\", \"src/store/actions/data.json\", true);\n    xmlhttp.send(); //     .then(parsedRes => {\n    //       if(parsedRes.resStatus !== 200){\n    //         parsedRes.resStatus === 0 ? dispatch(invalidBarcode('noAPI')) : dispatch(invalidBarcode('invalid'))\n    //       } else {\n    //         product = {\n    //           barcode_number: parsedRes.products[0].barcode_number,\n    //           barcode_type: parsedRes.products[0].barcode_type,\n    //           product_name: parsedRes.products[0].product_name,\n    //           product_image: parsedRes.products[0].images[0],\n    //           manufacturer: parsedRes.products[0].manufacturer,\n    //           brand: parsedRes.products[0].brand,\n    //           category: parsedRes.products[0].category,\n    //           description: parsedRes.products[0].description,\n    //         }\n    //         dispatch(productDetected(product))\n    //       } \n    //     })\n    //   }\n    //   }\n    // export const spinnerOn = () => {\n    //   return {\n    //     type: 'SPINNER_ON'\n    //   }\n    // }\n    // export const productDetected = (product) => {\n    //   return {\n    //     type: 'PRODUCT_DETECTED',\n    //     payload: product\n    //   }\n    // }\n    // export const invalidBarcode = (err) => {\n    //   let errText = err === 'noAPI' ? 'NO_API_KEY' : 'INVALID_BARCODE'\n    //   return {\n    //     type: errText,\n    //   }\n  };\n};","map":{"version":3,"sources":["/Users/zhangyu/Documents/barcodescanner-app/barcodescanner-app/barcodescanner/src/store/actions/scannedItems.js"],"names":["startScanning","type","clearScanned","setItem","i","payload","deleteItem","processBarcode","barcode","dispatch","spinnerOn","xmlhttp","XMLHttpRequest","txt","onreadystatechange","readyState","status","myObj","JSON","parse","responseText","x","data","length","console","log","names","document","getElementById","innerHTML","open","send"],"mappings":"AACA;AAEA,OAAO,MAAMA,aAAa,GAAG,MAAM;AAC/B,SAAO;AACLC,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJI;AAML,OAAO,MAAMC,YAAY,GAAG,MAAM;AAChC,SAAO;AACLD,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAME,OAAO,GAAIC,CAAD,IAAO;AAC5B,SAAO;AACLH,IAAAA,IAAI,EAAE,UADD;AAELI,IAAAA,OAAO,EAAED;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAME,UAAU,GAAIF,CAAD,IAAO;AAC/B,SAAO;AACLH,IAAAA,IAAI,EAAE,aADD;AAELI,IAAAA,OAAO,EAAED;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMG,cAAc,GAAIC,OAAD,IAAa;AACzC,SAAOC,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAACC,SAAS,EAAV,CAAR,CADiB,CAGjB;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAMC,OAAO,GAAG,IAAIC,cAAJ,EAAhB;AACA,UAAMC,GAAG,GAAG,EAAZ;;AACAF,IAAAA,OAAO,CAACG,kBAAR,GAA6B,YAAW;AAC1C,UAAI,KAAKC,UAAL,IAAmB,CAAnB,IAAwB,KAAKC,MAAL,IAAe,GAA3C,EAAgD;AAC5C,cAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAW,KAAKC,YAAhB,CAAd,CAD4C,CAE5C;;AACA,YAAIC,CAAC,GAAG,EAAR;;AACA,aAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGJ,KAAK,CAACK,IAAN,CAAWC,MAA3B,EAAmCF,CAAC,EAApC,EAAwC;AACpC;AACA;AACA;AACAG,UAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACK,IAAN,CAAWD,CAAX,EAAcK,KAA1B;AACH,SAT2C,CAU5C;;;AACAC,QAAAA,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,EAA0CC,SAA1C,GAAsDhB,GAAtD;AACH;AACJ,KAdK;;AAeNF,IAAAA,OAAO,CAACmB,IAAR,CAAa,KAAb,EAAoB,6BAApB,EAAmD,IAAnD;AACAnB,IAAAA,OAAO,CAACoB,IAAR,GA5CuB,CA8CrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACD,GArFG;AAsFD,CAvFM","sourcesContent":["\n//import {APIKEY, URL_PATH, URL_EXTENSION} from '../../assets/config'\n\nexport const startScanning = () => {\n    return {\n      type: \"START_SCANNING\"\n    }\n  }\n  \n  export const clearScanned = () => {\n    return {\n      type: 'CLEAR_SCANNED'\n    }\n  }\n  \n  export const setItem = (i) => {\n    return {\n      type: 'SET_ITEM',\n      payload: i\n    }\n  }\n  \n  export const deleteItem = (i) => {\n    return {\n      type: 'DELETE_ITEM',\n      payload: i\n    }\n  }\n  \n  export const processBarcode = (barcode) => {\n    return dispatch => {\n      dispatch(spinnerOn())\n      \n      // let url = URL_PATH + barcode + URL_EXTENSION + APIKEY\n      \n      // let req = new Request(url , {\n      //   headers: {\n      //     'Access-Control-Allow-Origin': 'http://localhost:3000'\n      //   },\n      //   mode: 'no-cors'\n      // })\n      \n      // let product = null\n      // fetch(req)\n      // .catch(err => console.log('error', err))\n      // .then(res => {\n      //   console.log(res.status)\n      //   if(res.status !== 200){\n      //     return {\n      //       resStatus: res.status\n      //     }\n      //   } else if(res.status === 200) {\n      //     return res.json()\n      //   }\n      // })\n\n      const xmlhttp = new XMLHttpRequest();\n      const txt = \"\";\n      xmlhttp.onreadystatechange = function() {\n    if (this.readyState == 4 && this.status == 200) {\n        const myObj = JSON.parse(this.responseText);\n        //txt += \"<select>\";\n        let x = \"\";\n        for (x = 0; x < myObj.data.length; x++) {\n            //txt += \"<option>\" + myObj[x].name;\n            //txt += \"<option>\" + myObj[x].price;\n            //txt += '<option value=\"' + x + '\">' + myObj.catalog[x].name + '</option>';\n            console.log(myObj.data[x].names);\n        }\n        //txt += \"</select>\";\n        document.getElementById(\"servicedetails\").innerHTML = txt;\n    }\n};\nxmlhttp.open(\"GET\", \"src/store/actions/data.json\", true);\nxmlhttp.send();\n\n  //     .then(parsedRes => {\n  //       if(parsedRes.resStatus !== 200){\n  //         parsedRes.resStatus === 0 ? dispatch(invalidBarcode('noAPI')) : dispatch(invalidBarcode('invalid'))\n  //       } else {\n  //         product = {\n  //           barcode_number: parsedRes.products[0].barcode_number,\n  //           barcode_type: parsedRes.products[0].barcode_type,\n  //           product_name: parsedRes.products[0].product_name,\n  //           product_image: parsedRes.products[0].images[0],\n  //           manufacturer: parsedRes.products[0].manufacturer,\n  //           brand: parsedRes.products[0].brand,\n  //           category: parsedRes.products[0].category,\n  //           description: parsedRes.products[0].description,\n  //         }\n  //         dispatch(productDetected(product))\n  //       } \n  //     })\n  //   }\n  //   }\n  \n  // export const spinnerOn = () => {\n  //   return {\n  //     type: 'SPINNER_ON'\n  //   }\n  // }\n    \n    \n  // export const productDetected = (product) => {\n  //   return {\n  //     type: 'PRODUCT_DETECTED',\n  //     payload: product\n  //   }\n  // }\n  \n  // export const invalidBarcode = (err) => {\n  //   let errText = err === 'noAPI' ? 'NO_API_KEY' : 'INVALID_BARCODE'\n  //   return {\n  //     type: errText,\n  //   }\n}\n  }"]},"metadata":{},"sourceType":"module"}